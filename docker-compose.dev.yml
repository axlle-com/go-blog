services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: app
    networks:
      - projects_network
      - traefik
    volumes:
      - ./docker/.env:/app/.env
      - ./docker/.env:/.env
      - ./:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/health" ]
      interval: 10s
      timeout: 2s
      retries: 5
    labels:
      - "traefik.enable=true"

      # HTTP → HTTPS редирект
      - "traefik.http.routers.app-http.rule=Host(`test.ax-box.ru`)"
      - "traefik.http.routers.app-http.entrypoints=web"
      - "traefik.http.routers.app-http.middlewares=redirect-to-https"

      # HTTPS-доступ к сервису
      - "traefik.http.routers.app-https.rule=Host(`test.ax-box.ru`)"
      - "traefik.http.routers.app-https.entrypoints=websecure"
      - "traefik.http.routers.app-https.tls=true"
      - "traefik.http.routers.app-https.tls.certresolver=le"

      # Внутренний порт приложения
      - "traefik.http.services.app.loadbalancer.server.port=3000"

      # Traefik не будет проксировать, пока контейнер не считается healthy
      - "traefik.http.services.app.loadbalancer.healthcheck.path=/health"
      - "traefik.http.services.app.loadbalancer.healthcheck.interval=10s"

  cli:
    build:
      context: .
      dockerfile: Dockerfile
      target: cli
    networks:
      - projects_network
    volumes:
      - ./docker/.env:/app/.env
      - ./docker/.env:/.env
      - ./:/app
    depends_on:
      - postgres
      - redis

  postgres:
    image: postgres:16.4-alpine
    restart: always
    networks:
      - projects_network
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5433:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./docker/postgres/init-db.sql:/docker-entrypoint-initdb.d/init.sql
      - pg-data:/var/lib/postgresql/data

  redis:
    image: redis:7.4.0-alpine
    networks:
      - projects_network
    ports:
      - "6380:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - redis-data:/data

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.3
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
      - ELASTIC_USERNAME=elastic
      - ELASTIC_PASSWORD=name
    ports:
      - "9200:9200"
    volumes:
      - es-data:/usr/share/elasticsearch/data
    networks:
      - projects_network
    healthcheck:
      test: [ "CMD-SHELL", "curl -fsSL http://localhost:9200/_cluster/health || exit 1" ]
      interval: 10s
      timeout: 10s
      retries: 5
    profiles:
      - logging

  kibana:
    build: docker/kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - projects_network
      - traefik
    profiles:
      - logging
    volumes:
      - ./docker/kibana/init.sh:/usr/local/bin/kibana-init.sh
    entrypoint: [ "/usr/local/bin/kibana-init.sh" ]
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kibana.rule=Host(`kibana.ax-box.ru`)"
      - "traefik.http.routers.kibana.entrypoints=websecure"
      - "traefik.http.routers.kibana.tls.certresolver=le"
      - "traefik.http.services.kibana.loadbalancer.server.port=5601"

  filebeat:
    build: docker/filebeat
    volumes:
      - /var/log/app:/var/log/app
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - projects_network
    profiles:
      - logging

volumes:
  pg-data:
  es-data:
  redis-data:
    driver: local

networks:
  projects_network:
    external: true
    name: projects_network
  traefik:
    external: true
    name: traefik